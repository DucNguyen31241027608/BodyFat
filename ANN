import numpy as np 
import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense

# 1. Load d·ªØ li·ªáu
df = pd.read_csv("bodyfat.csv")

# Gi·∫£ s·ª≠ c·ªôt target t√™n "BodyFat" ho·∫∑c "bodyfat"
target_col = None
for c in df.columns:
    if "bodyfat" in c.lower():
        target_col = c
        break

if target_col is None:
    raise ValueError("Kh√¥ng t√¨m th·∫•y c·ªôt BodyFat trong CSV.")

X = df.drop(columns=[target_col])
y = df[target_col]

# 2. Chia t·∫≠p train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# 3. Chu·∫©n h√≥a d·ªØ li·ªáu
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 4. X√¢y d·ª±ng model Keras
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))  # Regression output

model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# 5. Hu·∫•n luy·ªán
history = model.fit(
    X_train, y_train,
    epochs=200,
    verbose=1
)

# 6. ƒê√°nh gi√°
loss, mae = model.evaluate(X_test, y_test, verbose=0)
print(f"Test Loss (MSE): {loss:.3f}")
print(f"Test MAE: {mae:.3f}")

# 7. D·ª± ƒëo√°n th·ª≠ nhi·ªÅu m·∫´u
n_samples = 5
samples = X_test[:n_samples]
preds = model.predict(samples).flatten()

print("\nSo s√°nh gi√° tr·ªã th·∫≠t v√† d·ª± ƒëo√°n (10 m·∫´u ƒë·∫ßu):")
for i in range(n_samples):
    true_val = y_test.iloc[i]
    pred_val = preds[i]
    print(f"M·∫´u {i+1:2d} | Th·∫≠t: {true_val:6.2f} | D·ª± ƒëo√°n: {pred_val:6.2f}")

model.save("bodyfat.keras")
joblib.dump(scaler, "scaler.joblib")


=== CODE GIAO DI·ªÜN ===

import joblib
import numpy as np
import pandas as pd
import ipywidgets as widgets
from IPython.display import display
from keras.models import load_model

# 1. Load l·∫°i model v√† scaler
model = load_model("bodyfat.keras")
scaler = joblib.load("scaler.joblib")

# 2. Load l·∫°i c·∫•u tr√∫c d·ªØ li·ªáu (ƒë·ªÉ bi·∫øt t√™n c·ªôt)
df = pd.read_csv("bodyfat.csv")
target_col = [c for c in df.columns if "bodyfat" in c.lower()][0]
feature_cols = df.drop(columns=[target_col]).columns.tolist()

# 3. T·∫°o √¥ nh·∫≠p li·ªáu cho t·ª´ng feature
inputs = {}
for col in feature_cols:
    inputs[col] = widgets.FloatText(
        description=col,
        style={'description_width': '150px'},
        layout=widgets.Layout(width='400px')
    )

# 4. N√∫t d·ª± ƒëo√°n
button = widgets.Button(description="D·ª± ƒëo√°n % m·ª° c∆° th·ªÉ", button_style="success")
output = widgets.Output()

def on_predict_clicked(b):
    with output:
        output.clear_output()
        # L·∫•y d·ªØ li·ªáu t·ª´ form
        values = [inputs[col].value for col in feature_cols]
        X_new = np.array(values).reshape(1, -1)
        # Chu·∫©n h√≥a
        X_new_scaled = scaler.transform(X_new)
        # D·ª± ƒëo√°n
        pred = model.predict(X_new_scaled)[0][0]
        print(f"üëâ D·ª± ƒëo√°n % m·ª° c∆° th·ªÉ: {pred:.2f}")

button.on_click(on_predict_clicked)

# 5. Hi·ªÉn th·ªã form
form_items = [inputs[col] for col in feature_cols]
ui = widgets.VBox(form_items + [button, output])
display(ui)

